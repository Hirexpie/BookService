import bcrypt from 'bcrypt'
import jwt from 'jsonwebtoken'
import { ITokenData, VerifyRequest } from '../checkAuth';
import { BookRepository, UserRepository } from "../../DB/repositotys";
import { Request,Response } from "express";
import { bindMethods } from "../BaindMhetods";
import { RefreshRepository } from '../../DB/repositotys'
import { ACCESS_SECRET,REFRESH_SECRET } from "../../config/env";
class constroller {
    constructor() {
        bindMethods(this)
    }
    // private
    private async createTokens(userId: string): Promise<{accessToken: string,refreshToken: string}> {
        const accessToken = jwt.sign({ userId }, ACCESS_SECRET, { expiresIn: '15m' });
        const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, { expiresIn: '7d' });
        return { accessToken, refreshToken };
    }


    private createAccess(userId:string):string {
        return jwt.sign({ userId }, ACCESS_SECRET, { expiresIn:'15m' })
    }
    // public

    // /register
    public async register(req:Request, res:Response): Promise<any> {
        try {
            const { username, email, password } = req.body;
      
            // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
            if (!username || !email || !password) {
              return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
            }
            
            // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
            if (password.length < 6) {
              return res.status(400).json({ message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" });
            }
      

      
            // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const existingUser = await UserRepository.findOne({ where: { email } });
            if (existingUser) {
              return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
            }

      
            // üîπ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);
      
            // üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUser = UserRepository.create({
              name:username,
              email,
              password: hashedPassword,
            });
      
            await UserRepository.save(newUser);
      
            return res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
        } 
        catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    }

    // /login
    public async login(req:Request, res:Response ): Promise<any> {
        try {
            const { email,password } = req.body
            const user = await UserRepository.findOne({
                where:{email}
            })
            if (!user) {
                return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
                }
        
            const isMatch = await bcrypt.compare(password, user.password);
            if (!isMatch) {
                return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
            }

            const ip = (req.headers['x-forwarded-for'] as string) ||
            req.socket.remoteAddress || 
            req.ip || '';

            const {accessToken,refreshToken} = await this.createTokens(user.id.toString());
            res.cookie("refreshToken", refreshToken, { httpOnly: true, secure: true, sameSite: "strict" });
            const NewToken = RefreshRepository.create({
                userId: user.id, 
                token: refreshToken,
                ipAddress: ip,
                isActive: true
            })
            
            await RefreshRepository.save(NewToken);
            res.status(201).json({accessToken})
        }
        catch (error) {
          res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });

        }
    }

    // /refresh
    public async refresh(req: Request, res: Response): Promise<any> {
        try {
            const refreshToken = req.cookies.refreshToken;
            if (!refreshToken) {
                return res.status(401).json({ message: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refreshToken" });
            }
    
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ –ë–î –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–Ω
            const refreshData = await RefreshRepository.findOne({
                where: { token: refreshToken }
            });
    
            if (!refreshData || !refreshData.isActive) {
                return res.status(401).json({ message: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refreshToken" });
            }
    
            // –í–∞–∂–Ω–æ! –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            let decoded: ITokenData;
            try {
                decoded = jwt.verify(refreshToken, REFRESH_SECRET) as ITokenData;
            } catch (err) {
                return res.status(401).json({ message: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: refreshToken –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" });
            }
    
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const user = await UserRepository.findOne({ where: { id: decoded.userId } });
            if (!user) {
                return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            }
    
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π accessToken
            const accessToken = this.createAccess(user.id.toString());
    
            return res.status(200).json({ accessToken });
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", e);
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: e });
        }
    }
    
    // /logout
    public async logout(req: Request, res: Response): Promise<any> {
        try {

            const refreshToken = req.cookies.refreshToken;
            
            
            if (!refreshToken) {
                res.status(401).json({ message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
                return 
            }
            
            
            const refreshData = await RefreshRepository.
                update({
                    token: refreshToken
                }, {
                    isActive: false
                });
            
            if (refreshData.affected === 0) {
                return res.status(404).json({ message: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
    
            res.clearCookie("refreshToken");
    
            return res.status(200).json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
            

        }
        catch (error) {
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    }

    // /me
    public async me(req:VerifyRequest, res:Response): Promise<any> {
        try {

            const userId = req.authData?.userId 

            const user = await UserRepository.findOne({
                where: {
                    id: userId
                }
            })  
            console.log(userId)
            if (!user) {
                return res.status(400).json({message:'—Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–∞–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!!'})
            }

            const books = await BookRepository.find({
                where: {
                    author_id: user.id
                }
            })

            res.json({
                userId: userId,
                name: user.name,
                countBooks: books.length,
                email: user.email,
                created_at: user.created_at
            })
        }
        catch (e) {
            res.status(500).json(e)
        }
    }
}



export default new constroller()